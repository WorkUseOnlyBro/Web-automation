const { chromium } = require('playwright'); // or 'firefox' or 'webkit'

(async () => {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();

  const page = await context.newPage();

  // Step 1: Navigate to your site and wait for login to complete
  await page.goto('https://your-site.com');

  // Optional: wait for a selector that only appears after login
  await page.waitForSelector('#some-dashboard-element');

  // Step 2: Extract cookies or tokens
  const cookies = await context.cookies();
  const authCookie = cookies.find(c => c.name === 'auth' || c.name.includes('token'));

  // Alternatively, try localStorage/sessionStorage if applicable
  const token = await page.evaluate(() => {
    return localStorage.getItem('token') || sessionStorage.getItem('token');
  });

  // Step 3: Make the GraphQL request inside the page context
  const response = await page.evaluate(async ({ token }) => {
    const graphqlEndpoint = '/graphql'; // Adjust if full URL needed

    const query = `
      query GetUserData($id: ID!) {
        user(id: $id) {
          name
          email
        }
      }
    `;

    const variables = { id: "123" };

    const res = await fetch(graphqlEndpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': token ? `Bearer ${token}` : ''
      },
      body: JSON.stringify({ query, variables }),
    });

    const data = await res.json();
    return data;
  }, { token });

  console.log('GraphQL Response:', response);

  await browser.close();
})();
----------------------------------------------------------------
1.1
import { test as base, expect } from '@playwright/test';
import { chromium } from 'playwright';

// Override default browser fixture to launch custom Chrome
const test = base.extend({
  browser: async ({}, use) => {
    const browser = await chromium.launch({
      headless: false,
      executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'
    });
    await use(browser);
    await browser.close();
  }
});

// Define the actual test
test('GraphQL request after login using custom Chrome', async ({ browser }) => {
  const context = await browser.newContext();
  const page = await context.newPage();

  // --- Step 1: Go to site and wait for login to complete ---
  await page.goto('https://your-site.com');

  // Wait for some element that confirms you're logged in
  await page.waitForSelector('#dashboard'); // Customize this selector

  // --- Step 2: Extract token/cookie ---
  const token = await page.evaluate(() => {
    return localStorage.getItem('token') || sessionStorage.getItem('token');
  });

  if (!token) {
    throw new Error('No token found in storage.');
  }

  // --- Step 3: Execute GraphQL query within page context ---
  const graphqlResponse = await page.evaluate(async ({ token }) => {
    const endpoint = '/graphql'; // Change to full URL if needed

    const query = `
      query GetUserData($id: ID!) {
        user(id: $id) {
          name
          email
        }
      }
    `;

    const variables = { id: "123" };

    const res = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ query, variables })
    });

    const data = await res.json();
    return data;
  }, { token });

  console.log('GraphQL Response:', graphqlResponse);

  expect(graphqlResponse.data.user).toBeDefined();
  expect(graphqlResponse.data.user.name).not.toBe('');
});
