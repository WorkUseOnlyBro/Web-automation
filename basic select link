import { chromium } from 'playwright';

(async () => {
  // Launch browser
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();

  // Go to target page
  await page.goto('https://example.com');

  // Click a link by selector (e.g., anchor with text "More information")
  await page.click('text=More information');

  // Wait for navigation after clicking link
  await page.waitForLoadState('load');

  console.log('Link clicked and page loaded');

  await browser.close();
})();


const { test } = require('@playwright/test');

test('open with custom chrome', async () => {
    const { chromium } = require('@playwright/test');
        const browser = await chromium.launch ({
            executablePath: "C:\Program Files\Google\Chrome\Application\chrome.exe"
        });
        const page = await browser.newPage();
        await page.goto('place holder');
       // await browser.close();
});

-------------------------------------
const { test } = require('@playwright/test');
const playwright = require('playwright');

test('open with custom chrome and click link', async () => {
  // Launch Chrome explicitly
  const browser = await playwright.chromium.launch({
    headless: false,
    executablePath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
  });

  const page = await browser.newPage();

  // Navigate
  await page.goto('https://example.com');

  // Click a link (by text or selector)
  await page.click('text=More information');

  // Wait for navigation
  await page.waitForLoadState('load');

  console.log('Link clicked and page loaded');

  await browser.close();
});
----------------------------------------------
const { chromium } = require('playwright');
const { test } = require('@playwright/test');

test('open with custom chrome', async () => {
  const browser = await chromium.launch({
    headless: false,
    executablePath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
  });

  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.click('text=More information');

  await page.waitForLoadState('load');
  console.log('Link clicked and page loaded');
  await browser.close();
});
------------------------------------------------
{
  "name": "web-automation",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@playwright/test": "^1.55.1"
  },
  "directories": {
    "test": "tests"
  },
  "dependencies": {
    "playwright": "^1.55.0",
    "playwright-core": "^1.55.0"
  },
  "description": ""
}

--------------------------------------
import { test } from '@playwright/test';
import { chromium } from 'playwright';

test('open with custom chrome', async () => {
  const browser = await chromium.launch({
    headless: false,
    executablePath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
  });

  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.click('text=More information');
  await page.waitForLoadState('load');

  await browser.close();
});

------------------------------------------------
const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch({
    headless: false,
    executablePath: "C:\\Users\\YourName\\UnblockedChrome\\chrome.exe" // <-- Your custom path
  });

  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.click('text=More information');
  await page.waitForLoadState('load');
  console.log('Custom Chrome launched successfully');
  await browser.close();
})();
-------------------------------------------
import { test as base, expect } from '@playwright/test';
import { chromium } from 'playwright';

// Extend the test to override the browser fixture
const test = base.extend({
  browser: async ({}, use) => {
    const browser = await chromium.launch({
      headless: false,
      executablePath: "C:\\Users\\YourName\\CustomChrome\\chrome.exe"
    });
    await use(browser);
    await browser.close();
  }
});

test('should launch using custom Chrome', async ({ browser }) => {
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.click('text=More information');
  await page.waitForLoadState('load');
});
----------------------------------------------------------
// config 
// playwright.config.js
import { defineConfig } from '@playwright/test';
import { chromium } from 'playwright';

export default defineConfig({
  // disable default browser settings
  use: {
    headless: false
  },
  // override the default browser fixture completely
  projects: [
    {
      name: 'custom-chrome',
      testDir: './tests',
      use: {
        // tell runner to use our custom fixture instead of channel
        browserName: 'chromium', // still chromium engine
      },
    },
  ],
  // weâ€™ll override the browser fixture below
});

// then in your test file we extend the test fixture:

---------------------------------------------------------
import { test as base, expect } from '@playwright/test';
import { chromium } from 'playwright';

// override the browser fixture to use your Chrome
const test = base.extend({
  browser: async ({}, use) => {
    const browser = await chromium.launch({
      headless: false,
      executablePath: 'C:\\Users\\YourName\\CustomChrome\\chrome.exe'
    });
    await use(browser);
    await browser.close();
  },
});

test('launch custom chrome', async ({ browser }) => {
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.click('text=More information');
  await page.waitForLoadState('load');
});
---------------------
import { defineConfig } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  use: {
    headless: false
  },
  projects: [
    {
      name: 'custom-chrome',
      use: {
        browserName: 'chromium'
      }
    }
  ]
});
-----------------------------------------
graphql 
import { test as base, expect } from '@playwright/test';
import { chromium } from 'playwright';

// override the browser fixture to use your Chrome
const test = base.extend({
  browser: async ({}, use) => {
    const browser = await chromium.launch({
      headless: false,
      executablePath: 'C:\\Users\\YourName\\CustomChrome\\chrome.exe'
    });
    await use(browser);
    await browser.close();
  },
});

test('launch custom chrome and run GraphQL', async ({ browser }) => {
  const page = await browser.newPage();

  // assume logged in already (cookie/session present); if not, load page and login first
  await page.goto('https://cloud.tenable.com/'); // or appropriate base URL
  await page.waitForLoadState('networkidle');

  // --- Option A: run GraphQL from the page (uses page cookies / auth automatically) ---
  const gqlEndpoint = '/graphql'; // relative path uses same origin; or full URL 'https://cloud.tenable.com/graphql'
  const gqlQuery = `
    query GetVuln($id: ID!) {
      vulnerability(id: $id) {
        id
        cve
        severity
        description
        remediation
        assets { id hostname ip }
      }
    }
  `;
  const gqlVariables = { id: 'SAMPLE_PLUGIN_ID_OR_UUID' };

  const result = await page.evaluate(
    async (endpoint, query, variables) => {
      // attempt to deduce CSRF token if needed (common locations)
      const csrf =
        document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
        || document.querySelector('input[name="csrfmiddlewaretoken"]')?.value
        || null;

      const headers = {
        'Content-Type': 'application/json',
      };
      if (csrf) headers['X-CSRF-Token'] = csrf;

      const resp = await fetch(endpoint, {
        method: 'POST',
        credentials: 'same-origin', // important to send cookies
        headers,
        body: JSON.stringify({ query, variables }),
      });

      if (!resp.ok) {
        return { ok: false, status: resp.status, text: await resp.text() };
      }
      return { ok: true, json: await resp.json() };
    },
    gqlEndpoint,
    gqlQuery,
    gqlVariables
  );

  console.log('GraphQL (page) result:', result);
  expect(result.ok).toBeTruthy();

  // --- Option B: Node-side request using cookies from the page (use when you need direct control) ---
  // Get cookies for the GraphQL host from the page context
  const cookies = await page.context().cookies();
  // Build cookie header
  const cookieHeader = cookies.map(c => `${c.name}=${c.value}`).join('; ');

  // Create a request context that includes the cookie header (and any custom headers)
  const request = await browser.newContext().request; // quick access to Request API via new context

  // Note: Some Playwright versions prefer playwright.request.newContext(); using the context.request is OK here.
  const nodeResp = await request.post('https://cloud.tenable.com/graphql', {
    headers: {
      'Content-Type': 'application/json',
      'Cookie': cookieHeader,
      // add other headers if required, e.g. 'X-CSRF-Token': '...'
    },
    data: { query: gqlQuery, variables: gqlVariables },
  });

  if (!nodeResp.ok()) {
    const text = await nodeResp.text();
    console.error('GraphQL (node) failed', nodeResp.status(), text);
  } else {
    const json = await nodeResp.json();
    console.log('GraphQL (node) json:', json);
  }

  await page.close();
});

----------------------
import { test as base, expect } from '@playwright/test';
import { chromium } from 'playwright';

/**
 * Run a GraphQL POST from within the page context.
 * - If `attributes` is provided, it replaces a placeholder token `__ATTRS__` in `query`.
 * - Automatically attaches cookies; tries to pull a CSRF token from common locations.
 */
async function runGraphQLInPage(page, {
  endpoint,          // '/graphql' or full URL
  operationName,     // e.g., 'GetVuln'
  query,             // GraphQL text; can contain the token __ATTRS__ for dynamic selections
  variables = {},    // object for $variables
  attributes = [],   // ['id','severity','cve', ...] -> injected where __ATTRS__ appears
  extraHeaders = {}  // if you must pass special headers (e.g., X-Tenable-... )
}) {
  const selection = attributes?.length ? attributes.join('\n        ') : '';
  const finalQuery = attributes?.length ? query.replace('__ATTRS__', selection) : query;

  return await page.evaluate(async ({ endpoint, operationName, finalQuery, variables, extraHeaders }) => {
    // Heuristics for CSRF token locations (adjust if your app differs)
    const csrf =
      document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') ||
      document.querySelector('meta[name="csrfToken"]')?.getAttribute('content') ||
      document.querySelector('input[name="csrfmiddlewaretoken"]')?.value ||
      null;

    const headers = {
      'Content-Type': 'application/json',
      ...extraHeaders
    };
    if (csrf) headers['X-CSRF-Token'] = csrf;

    const resp = await fetch(endpoint, {
      method: 'POST',
      credentials: 'same-origin',
      headers,
      body: JSON.stringify({ operationName, query: finalQuery, variables })
    });

    const text = await resp.text();
    let json;
    try { json = JSON.parse(text); } catch { /* non-JSON error */ }

    return {
      httpOk: resp.ok,
      status: resp.status,
      data: json?.data ?? null,
      errors: json?.errors ?? (resp.ok ? null : [{ message: text }])
    };
  }, { endpoint, operationName, finalQuery, variables, extraHeaders });
}

// ---------- keep your custom Chrome fixture ----------
const test = base.extend({
  browser: async ({}, use) => {
    const browser = await chromium.launch({
      headless: false,
      executablePath: 'C:\\Users\\YourName\\CustomChrome\\chrome.exe'
    });
    await use(browser);
    await browser.close();
  },
});

// ------------- example usage -------------
test('GraphQL with dynamic attributes', async ({ browser }) => {
  const page = await browser.newPage();

  // If youâ€™re already authenticated via storageState or existing session, you can skip login
  await page.goto('https://cloud.tenable.com'); // base origin for relative /graphql
  await page.waitForLoadState('networkidle');

  // Example: the query contains a token __ATTRS__ where we inject fields from `attributes`
  const queryTemplate = `
    query GetVuln($id: ID!) {
      vulnerability(id: $id) {
        __ATTRS__
      }
    }
  `;

  const result = await runGraphQLInPage(page, {
    endpoint: '/graphql',            // or 'https://cloud.tenable.com/graphql'
    operationName: 'GetVuln',
    query: queryTemplate,
    variables: { id: 'REPLACE_ME' }, // your plugin/issue ID or UUID
    attributes: [
      'id',
      'cve',
      'severity',
      'cvss { base score vector }',
      'description',
      'remediation',
      'publishedDate',
      'lastSeen',
      'assets { id hostname ip }',
      'references',
      'exploitable'
    ]
    // extraHeaders: { 'X-Tenable-Whatever': '...' } // if needed
  });

  // Basic assertions / diagnostics
  expect(result.httpOk, `HTTP ${result.status} ${JSON.stringify(result.errors)}`).toBeTruthy();
  expect(result.errors, `GraphQL errors: ${JSON.stringify(result.errors, null, 2)}`).toBeFalsy();
  expect(result.data?.vulnerability).toBeTruthy();

  console.log('Vuln detail:', result.data.vulnerability);

  await page.close();
});

